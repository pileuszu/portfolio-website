[
  {
    "title": "React 성능 최적화 가이드",
    "desc": "React 애플리케이션의 성능을 향상시키는 다양한 기술들",
    "images": ["/images/blog_title.png"],
    "details": "React 애플리케이션에서 성능 최적화는 사용자 경험을 크게 향상시킬 수 있습니다. 코드 스플리팅, 메모이제이션, 가상화 등 다양한 기술을 통해 번들 크기를 줄이고 렌더링 성능을 개선할 수 있습니다.\n\n주요 최적화 기법으로는 React.memo, useMemo, useCallback을 활용한 불필요한 리렌더링 방지와 React.lazy를 통한 코드 스플리팅이 있습니다.",
    "tech": ["React", "JavaScript", "성능 최적화"],
    "year": "2024",
    "type": "blog",
    "link": "https://dev.to/example/react-performance-guide"
  },
  {
    "title": "Next.js 15 마이그레이션 경험기",
    "desc": "Next.js 14에서 15로 마이그레이션하며 배운 점들",
    "images": ["/images/3dtrain_title.png"],
    "details": "Next.js 15로 업그레이드하면서 마주친 주요 변경사항들과 해결 방법을 정리했습니다. 특히 App Router의 새로운 기능들과 성능 개선사항에 대해 자세히 다루었습니다.\n\n업그레이드 시 주의해야 할 점들과 권장사항도 함께 공유합니다.",
    "tech": ["Next.js", "React", "TypeScript"],
    "year": "2024",
    "type": "blog",
    "link": "https://medium.com/example/nextjs-15-migration"
  },
  {
    "title": "Stream Deck으로 생산성 향상하기",
    "desc": "Elgato Stream Deck을 활용한 개발 워크플로우 개선",
    "images": ["/images/streamdeck_title.png"],
    "details": "Stream Deck은 단순한 게임용 장치가 아닌 개발자들의 생산성을 크게 향상시킬 수 있는 강력한 도구입니다. 자주 사용하는 명령어, 애플리케이션 실행, 심지어 복잡한 매크로까지 버튼 하나로 실행할 수 있습니다.\n\n이 글에서는 Stream Deck을 활용한 다양한 개발 시나리오와 설정 방법을 소개합니다.",
    "tech": ["Stream Deck", "자동화", "생산성"],
    "year": "2024",
    "type": "blog",
    "link": "https://blog.example/stream-deck-productivity"
  },
  {
    "title": "CSS Grid 완벽 가이드",
    "desc": "모던 웹 레이아웃을 위한 CSS Grid의 모든 것",
    "images": ["/images/blog_title.png"],
    "details": "CSS Grid는 복잡한 레이아웃을 손쉽게 구현할 수 있는 강력한 도구입니다. Flexbox와 함께 사용하면 거의 모든 레이아웃 요구사항을 충족시킬 수 있습니다.\n\nGrid Container, Grid Items, Grid Lines 등 핵심 개념과 실무 예제를 통해 완벽하게 이해해보세요.",
    "tech": ["CSS", "Grid", "Layout"],
    "year": "2024",
    "type": "blog",
    "link": "https://css-tricks.com/example/css-grid-guide"
  },
  {
    "title": "Git 전략적 브랜치 관리",
    "desc": "효율적인 Git 브랜치 전략과 협업 방법",
    "images": ["/images/blog_title.png"],
    "details": "Git 브랜치 전략은 팀 협업의 핵심입니다. Feature Branch, Git Flow, GitHub Flow 등 다양한 전략을 비교하고, 실제 프로젝트에서 어떻게 적용하는지 알아보겠습니다.\n\n올바른 브랜치 전략은 코드 품질을 높이고 충돌을 최소화하며 개발 속도를 향상시킵니다.",
    "tech": ["Git", "브랜치 전략", "협업"],
    "year": "2024",
    "type": "blog",
    "link": "https://example.com/git-branch-strategy"
  },
  {
    "title": "TypeScript 고급 패턴",
    "desc": "실무에서 유용한 TypeScript 고급 패턴들",
    "images": ["/images/3dtrain_title.png"],
    "details": "TypeScript를 효과적으로 사용하기 위한 고급 패턴들을 소개합니다. 제네릭, 유틸리티 타입, 조건부 타입 등 실무에서 자주 사용되는 패턴들을 통해 타입 안전성을 높이는 방법을 알아보겠습니다.\n\n또한 프로젝트에서 TypeScript를 도입할 때 고려해야 할 점들과 모범 사례도 함께 공유합니다.",
    "tech": ["TypeScript", "고급 패턴", "타입 안전성"],
    "year": "2024",
    "type": "blog",
    "link": "https://typescript.example/advanced-patterns"
  },
  {
    "title": "웹 접근성 가이드라인",
    "desc": "웹사이트 접근성을 높이는 필수 가이드라인",
    "images": ["/images/blog_title.png"],
    "details": "웹 접근성은 모든 사용자가 웹사이트를 이용할 수 있도록 하는 중요한 요소입니다. WCAG 2.1 가이드라인을 중심으로 색상 대비, 키보드 네비게이션, 스크린 리더 지원 등 필수적인 접근성 개선 방법을 알아보겠습니다.\n\n접근성 개선은 사용자 경험을 향상시키고 법적 요구사항도 충족시킬 수 있습니다.",
    "tech": ["웹 접근성", "WCAG", "사용자 경험"],
    "year": "2024",
    "type": "blog",
    "link": "https://a11y.example/web-accessibility-guide"
  }
]
